{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["VERSION","process","iv","utf8Encoder","TextEncoder","utf8Decoder","TextDecoder","App","useState","input","setInput","key","setKey","output","setOutput","error","setError","className","rows","cols","placeholder","value","onChange","e","target","id","type","maxLength","onClick","encrypt","decrypt","readOnly","rel","href","title","substring","keyString","plaintext","a","importKey","encryptMessage","ciphertext","console","decryptMessage","arrayBufferToBase64","window","crypto","subtle","name","encode","base64ToArrayBuffer","decode","rawKey","padEnd","length","b64","byteString","atob","byteArray","Uint8Array","i","charCodeAt","buffer","s","bytes","byteLength","String","fromCharCode","btoa","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1514637e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst VERSION = process.env.REACT_APP_GIT_COMMIT_HASH || 'dev';\n\n//This is terrible in more than one way.\nconst iv = \"\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x62\\x30\\x7a\\x32\\x33\\x34\\x35\\x6e\";\n\nconst utf8Encoder = new TextEncoder();\nconst utf8Decoder = new TextDecoder();\n\nexport default function App() {\n  const [input, setInput] = useState(\"YkreP8qCxamCD+tB8OF9nA==\");\n  const [key, setKey] = useState(\"Top Secret\");\n  const [output, setOutput] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <textarea rows=\"8\" cols=\"80\" placeholder=\"Input\" value={input} onChange={(e) => setInput(e.target.value)}/>\n      <div id=\"buttons\"><input id=\"key\" type=\"text\" placeholder=\"Key\" maxLength=\"32\" value={key} onChange={(e) => setKey(e.target.value)}/><button onClick={() => encrypt(key, input, setOutput, setError)}>Encrypt</button><button onClick={() => decrypt(key, input, setOutput, setError)}>Decrypt</button></div>\n      <div id=\"errors\">{error}</div>\n      <textarea rows=\"8\" cols=\"80\" placeholder=\"Output\" value={output} readOnly/>\n      <footer><a rel=\"author\" href=\"https://twitter.com/nearwood\">@nearwood</a> <a href=\"https://github.com/nearwood/dumbaes\">GitHub</a> <span title=\"version\">{VERSION.substring(0, 7)}</span></footer>\n    </div>\n  );\n}\n\nasync function encrypt(keyString, plaintext, setOutput, setError) {\n  try {\n    const key = await importKey(keyString);\n    const ciphertext = await encryptMessage(key, plaintext);\n    setError(null);\n    setOutput(ciphertext);\n  } catch (e) {\n    console.error(e);\n    setError(\"Error: Could not encrypt.\");\n  }\n}\n\nasync function decrypt(keyString, ciphertext, setOutput, setError) {\n  try {\n    const key = await importKey(keyString);\n    const plaintext = await decryptMessage(key, ciphertext);\n    setError(null);\n    setOutput(plaintext);\n  } catch (e) {\n    console.error(e);\n    setError(\"Error: Could not decrypt.\");\n  }\n}\n\nasync function encryptMessage(key, plaintext) {\n  return arrayBufferToBase64(await window.crypto.subtle.encrypt(\n    {\n      name: \"AES-CBC\",\n      iv: utf8Encoder.encode(iv)\n    },\n    key,\n    utf8Encoder.encode(plaintext)\n  ));\n}\n\nasync function decryptMessage(key, ciphertext) {\n  return utf8Decoder.decode(await window.crypto.subtle.decrypt(\n    {\n      name: \"AES-CBC\",\n      iv: utf8Encoder.encode(iv)\n    },\n    key,\n    base64ToArrayBuffer(ciphertext)\n  ));\n}\n\nasync function importKey(rawKey) {\n  return await window.crypto.subtle.importKey(\n    \"raw\",\n    utf8Encoder.encode(rawKey.padEnd(32, '\\0')),\n    {\n      name: \"AES-CBC\",\n      length: 256\n    },\n    true,\n    [\"encrypt\", \"decrypt\"]\n  );\n}\n\nfunction base64ToArrayBuffer(b64) {\n  var byteString = window.atob(b64);\n  var byteArray = new Uint8Array(byteString.length);\n  for (var i = 0; i < byteString.length; i++) {\n    byteArray[i] = byteString.charCodeAt(i);\n  }\n  return byteArray;\n}\n\nfunction arrayBufferToBase64(buffer) {\n  let s = '';\n  let bytes = new Uint8Array(buffer);\n  for (let i = 0; i < bytes.byteLength; ++i) {\n    s += String.fromCharCode(bytes[i]);\n  }\n\n  return window.btoa(s);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}